function onDragStart(event: DragStartEvent) {
		if (event.active.data.current?.type === 'Column') {
			setActiveColumn(event.active.data.current.column);
			setInitialColumnID(event.active.data.current.column.id);
			return;
		}
		if (event.active.data.current?.type === 'Card') {
			setActiveCard(event.active.data.current.card);
			setInitialColumnID(event.active.data.current.card.columnID);
			return;
		}
	}

	function onDragOver(event: DragOverEvent) {
		const { active, over } = event;

		if (!over) return;

		// if we are moving card
		if (active.data.current?.type === 'Card') {
			const activeCardID = active.id;
			const overID = over.id;

			if (activeCardID === overID) return;

			const isOverColumn = over.data.current?.type === 'Column';

			// if card is over column
			if (isOverColumn) {
				if (active.data.current?.card.columnID === overID) return;

				setBoardColumns((columns) => {
					const activeColumnIndex = columns.findIndex(
						(column) => column.id === active.data.current?.card.columnID
					);
					const overColumnIndex = columns.findIndex(
						(column) => column.id === overID
					);

					const newCardOrder =
						columns[overColumnIndex].cards.length > 0
							? Math.max(
									...columns[overColumnIndex].cards.map((card) => card.order)
							  ) + 1000
							: 1000;

					const newColumns = columns.map((column, index) => {
						if (index === activeColumnIndex) {
							return {
								...column,
								cards: column.cards.filter((card) => card.id !== activeCardID),
							};
						}
						if (index === overColumnIndex) {
							return {
								...column,
								cards: [
									...column.cards,
									{
										id: activeCardID,
										title: active.data.current?.card.title,
										description: active.data.current?.card.description,
										order: newCardOrder,
									} as ICard,
								],
							};
						}
						return column;
					});

					return arrayMove(newColumns, 0, 0);
				});
			}

			const isOverCard = over.data.current?.type === 'Card';

			// if card is over card
			if (isOverCard) {
				setBoardColumns((columns) => {
					const activeColumnID = active.data.current?.card.columnID;
					const overColumnID = over.data.current?.card.columnID;

					// moving card inside 1 column
					if (initialColumnID === overColumnID) {
						const activeColumnIndex = columns.findIndex(
							(column) => column.id === activeColumnID
						);

						const currentColumn = columns[activeColumnIndex];

						const activeCardIndex = currentColumn.cards.findIndex(
							(card) => card.id === activeCardID
						);
						const overCardIndex = currentColumn.cards.findIndex(
							(card) => card.id === overID
						);

						const activeCardOrder = currentColumn.cards[activeCardIndex].order;
						const overCardOrder = currentColumn.cards[overCardIndex].order;

						// if we are moving top to bottom
						if (activeCardOrder < overCardOrder) {
							const newCardOrder = currentColumn.cards[overCardIndex + 1]
								? overCardOrder +
								  (currentColumn.cards[overCardIndex + 1].order -
										overCardOrder) /
										2
								: overCardOrder + 1000;
							const newColumns = columns.map((column, index) => {
								if (index === activeColumnIndex) {
									const newCards = column.cards.map((card, index) => {
										if (index === activeCardIndex) {
											return { ...card, order: newCardOrder };
										}
										return card;
									});
									return {
										...column,
										cards: arrayMove(newCards, activeCardIndex, overCardIndex),
									};
								}
								return column;
							});
							return arrayMove(newColumns, 0, 0);
						}
						// if we are moving from bottom to top
						if (activeCardOrder > overCardOrder) {
							const newCardOrder = currentColumn.cards[overCardIndex - 1]
								? currentColumn.cards[overCardIndex - 1].order +
								  (overCardOrder -
										currentColumn.cards[overCardIndex - 1].order) /
										2
								: overCardOrder / 2;
							const newColumns = columns.map((column, index) => {
								if (index === activeColumnIndex) {
									const newCards = column.cards.map((card, index) => {
										if (index === activeCardIndex) {
											return { ...card, order: newCardOrder };
										}
										return card;
									});
									return {
										...column,
										cards: arrayMove(newCards, activeCardIndex, overCardIndex),
									};
								}
								return column;
							});
							return arrayMove(newColumns, 0, 0);
						}
						return columns;
					} else {
						console.log('moving to another column');
						// moving to other column
						return columns;
					}
				});
			}
		}
		// if we are moving column
		if (active.data.current?.type === 'Column') {
			const activeColumnID = active.id;
			const overColumnID =
				over.data.current?.type === 'Column'
					? over.id
					: over.data.current?.card.columnID;
			// TODO: Columns are moving but it is not shown, have to understand how they move without onDragOver
			if (activeColumnID === overColumnID) return;

			setBoardColumns((columns) => {
				const activeColumnIndex = columns.findIndex(
					(column) => column.id === activeColumnID
				);
				const overColumnIndex = columns.findIndex(
					(column) => column.id === overColumnID
				);

				const overColumnOrder = columns[overColumnIndex].order;
				const activeColumnOrder = columns[activeColumnIndex].order;
				let newOrder = 0;

				// if we are moving column from left to right
				if (activeColumnOrder < overColumnOrder) {
					const afterOverColumnOrder = columns[overColumnIndex + 1]?.order;
					// if we have column after over column
					if (afterOverColumnOrder) {
						newOrder =
							overColumnOrder + (afterOverColumnOrder - overColumnOrder) / 2;
					} else {
						// if there is no column after over column
						newOrder = overColumnOrder + 1000;
					}
				}

				// if we are moving column from right to left
				if (activeColumnOrder > overColumnOrder) {
					const beforeOverColumnOrder = columns[overColumnIndex - 1]?.order;
					// if we have column before over column
					if (beforeOverColumnOrder) {
						newOrder =
							beforeOverColumnOrder +
							(overColumnOrder - beforeOverColumnOrder) / 2;
					} else {
						// if there is no column before over column
						newOrder = overColumnOrder / 2;
					}
				}

				const newColumns = columns.map((column, index) => {
					if (index === activeColumnIndex) {
						return { ...column, order: newOrder };
					}

					return column;
				});

				return arrayMove(newColumns, activeColumnIndex, overColumnIndex);
			});
		}
	}

	function onDragEnd(event: DragEndEvent) {
		setActiveCard(null);
		setActiveColumn(null);

		const { active, over } = event;

		if (!over) return;

		if (active.data.current?.type === 'Card') {
			const activeCardID = active.id;
			const overID = over.id;

			if (activeCardID === overID) return; // sometimes card already changed column and may be over itself so the request is not made

			const isOverColumn = over.data.current?.type === 'Column';
			if (isOverColumn) {
				if (!initialColumnID) return;

				const overColumnIndex = boardColumns.findIndex(
					(column) => column.id === overID
				);

				const newCardOrder =
					boardColumns[overColumnIndex].cards.length > 0
						? Math.max(
								...boardColumns[overColumnIndex].cards.map((card) => card.order)
						  ) + 1000
						: 1000;

				changeCardColumn({
					id: activeCardID,
					boardID,boardColumns
					columnID: initialColumnID,
					newColumnID: overID,
					order: newCardOrder,
				});
			}

			// const isOverCard = over.data.current?.type === 'Card';

			// if (isOverCard) {
			// 	const activeCard = active.data.current?.card;
			// 	const overCard = over.data.current?.card;

			// 	console.log(activeCard, overCard);

			// 	// setBoardColumns((columns) => {
			// 	// 	return arrayMove(newColumns, 0, 0);
			// 	// });
			// }
		}

		// if we are moving column over column
		if (active.data.current?.type === 'Column') {
			const activeColumnID = initialColumnID;
			const overColumnID =
				over.data.current?.type === 'Column'
					? over.id
					: over.data.current?.card.columnID;
			// TODO: Columns are moving but it is not shown, have to understand how they move without onDragOver
			console.log(activeColumnID, overColumnID);
			if (activeColumnID === overColumnID) return;

			const activeColumnIndex = boardColumns.findIndex(
				(column) => column.id === activeColumnID
			);
			const overColumnIndex = boardColumns.findIndex(
				(column) => column.id === overColumnID
			);

			const overColumnOrder = boardColumns[overColumnIndex].order;
			const activeColumnOrder = boardColumns[activeColumnIndex].order;
			let newOrder = 0;

			// if we are moving column from left to right
			if (activeColumnOrder < overColumnOrder) {
				const afterOverColumnOrder = boardColumns[overColumnIndex + 1]?.order;
				// if we have column after over column
				if (afterOverColumnOrder) {
					newOrder =
						overColumnOrder + (afterOverColumnOrder - overColumnOrder) / 2;
					updateColumn({
						boardID,
						id: activeColumnID,
						order: newOrder,
					});
				} else {
					// if there is no column after over column
					newOrder = overColumnOrder + 1000;
					updateColumn({
						boardID,
						id: activeColumnID,
						order: newOrder,
					});
				}
			}

			// if we are moving column from right to left
			if (activeColumnOrder > overColumnOrder) {
				const beforeOverColumnOrder = boardColumns[overColumnIndex - 1]?.order;
				// if we have column before over column
				if (beforeOverColumnOrder) {
					newOrder =
						beforeOverColumnOrder +
						(overColumnOrder - beforeOverColumnOrder) / 2;
					updateColumn({
						boardID,
						id: activeColumnID,
						order: newOrder,
					});
				} else {
					// if there is no column before over column
					newOrder = overColumnOrder / 2;
					updateColumn({
						boardID,
						id: activeColumnID,
						order: newOrder,
					});
				}
			}
		}
		setInitialColumnID(null);
	}